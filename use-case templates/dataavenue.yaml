tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/master/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  inputs:
    port_exposed_da:
      type: list
      description: port exposed for data_avenue
      required: true
      default: ["8080:8080"]
    port_exposed_mysql:
      type: list
      description: port exposed for mysql
      required: true
      default: ["3306:3306"]
    docker_image_proxy:
      type: string
      description: name of docker image of proxy
      required: true
      default: haproxy
    docker_image_mysql:
      type: string
      description: name of docker image of mysql
      required: true
      default: mysql
    docker_image_data_avenue:
      type: string
      description: name of docker image of data_avenue
      required: true
      default: data_avenue
    host_mem:
      type: scalar-unit.size
      description: host mem capacity
      required: true
      default: 4 GB
    host_disk:
      type: scalar-unit.size
      description: host disk capacity
      required: true
      default: 50 GB
    libdrive_id:
      type: string
      description: id of the instance image to launch
      required: true
      default: "some id"
    host_cpu:
      type: integer
      description: cpu of the host
      required: true
      default: 2
    mysql_root_password:
      type: string
      description: environment variable to set the root password
      required: true
      default: DEFAULT_HERE
    mysql_database:
      type: string
      description: environment variable to set the database name
      required: true
      default: DEFAULT_HERE
    mysql_user:
      type: string
      description: environment variable to set the use name
      required: true
      default: DEFAULT_HERE
    mysql_password:
      type: string
      description: environment variable to set the password
      required: true
      default: DEFAULT_HERE
    max_cpu_consumption:
      type: float
      description: max cpu consumption
      required: true
      default: 0.8
    min_cpu_consumption:
      type: float
      description: min cpu consumption
      required: true
      default: 0.2
    scale_up_max_time:
      type: scalar-unit.time
      description: max time to scale up
      required: true
      default: 5 m
    scale_down_max_time:
      type: scalar-unit.time
      description: max time scale down
      required: true
      default: 5 m

  node_templates:
    proxy:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image_proxy }
           repository: docker_hub
       requirements:
         - service:
             node: data-avenue
             relationship:
               type: tosca.relationships.MiCADO.ConnectsTo
               properties:
                 network: default_net

    data-avenue:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
         ports: { get_input: port_exposed_da }
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image_data_avenue }
           repository: docker_hub
       requirements:
         - service:
             node: mysql
             relationship:
               type: tosca.relationships.MiCADO.ConnectsTo
               properties:
                 network: default_net
    mysql:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
         environment:
           MYSQL_ROOT_PASSWORD: { get_input: mysql_root_password }
           MYSQL_DATABASE: { get_input: mysql_database }
           MYSQL_USER: { get_input: mysql_user }
           MYSQL_PASSWORD: { get_input: mysql_password }
         ports: { get_input: port_exposed_mysql }
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image_mysql }
           repository: docker_hub

    worker_node:
      type: tosca.nodes.MiCADO.Occopus.CloudSigma.Compute
      properties:
        cloud:
          interface_cloud: cloudsigma
          endpoint_cloud: https://zrh.cloudsigma.com/api/2.0
      capabilities:
        host:
          properties:
            num_cpus: 2000
            mem_size: 4294967296
            vnc_password: secret
            libdrive_id: 390d52b5-4a2c-48ca-af7a-341a051dd09e
            public_key_id: ADD_YOUR_ID_HERE
            firewall_policy: ADD_YOUR_ID_HERE

  outputs:
    ip_address:
      value: { get_attribute: [ data-avenue, ip_address ]}
    port:
      value: { get_attribute: [ data-avenue, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker_node ]
        properties:
          constants:
            NODE_TH_MAX: '60'
            NODE_TH_MIN: '20'
          alerts:
          - alert: node_overloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
            for: 1m
          - alert: node_underloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
            for: 1m
          min_instances: 1
          max_instances: 4
          scaling_rule: |
            if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
              if node_overloaded:
                m_node_count+=1
              if node_underloaded:
                m_node_count-=1
            else:
              print('Transient phase, skipping update of nodes...')
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ data-avenue ]
        properties:
          constants:
            SERVICE_NAME: 'data-avenue'
            SERVICE_FULL_NAME: '{{stack}}_data-avenue'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '20'
          alerts:
          - alert: service_overloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
            for: 30s
          - alert: service_underloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
            for: 30s
          min_instances: 1
          max_instances: 3
          scaling_rule: |
            if len(m_nodes) == m_node_count:
              if service_overloaded and m_node_count > m_container_count:
                m_container_count+=1
              if service_underloaded:
                m_container_count-=1
            else:
              print('Transient phase, skipping update of containers...')
