tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - ../nodes/custom_types.yaml
  - ../policies/scalability/consumption/tosca_policy_scalability_comsumption.yaml


repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  inputs:

    host_mem:
      type: scalar-unit.size
      description: host mem capacity
      required: yes
      default: 4 GB
    host_disk:
      type: scalar-unit.size
      description: host disk capacity
      required: yes
      default: 50 GB
    libdrive_id:
      type: string
      description: id of the instance image to launch
      required: yes
      default: "some id"
    host_cpu:
      type: integer
      description: cpu of the host
      required: yes
      default: 2


    max_cpu_consumption:
      type: float
      description: max cpu consumption
      required: yes
      default: 0.8

    min_cpu_consumption:
      type: float
      description: min cpu consumption
      required: yes
      default: 0.2

    scale_up_max_time:
      type: scalar-unit.time
      description: max time to scale up
      required: yes
      default: 5 m

    scale_down_max_time:
      type: scalar-unit.time
      description: max time scale down
      required: yes
      default: 5 m

  node_templates:
    proxy:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:

       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image }
           repository: docker_hub
       requirements:
         - service: 
             node: data_avenue
             relationship: tosca.relationships.ConnectsTo
         - host: 
             node: VM
             relationship: tosca.relationships.HostedOn

    data_avenue:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image }
           repository: docker_hub
       requirements:
         - service:
             node: mongo
             relationship: tosca.relationship.ConnectsTo
         - host: 
             node: VM
             relationship: tosca.relationships.HostedOn

    mongo:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:

       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: { get_input: docker_image }
           repository: docker_hub
       requirements:
         - host: 
             node: VM
             relationship: tosca.relationships.HostedOn

    VM:
       type: tosca.nodes.MiCADO.Occopus.CloudSigma.Compute
       properties:
          cloud:
            interface_cloud: cloudsigma
            endpoint_cloud: https://zrh.cloudsigma.com/api/2.0

       capabilities:
          host:
            properties:
              num_cpus: { get_input: host_cpu }
              disk_size: { get_input: host_disk }
              mem_size: { get_input: host_mem }
              libdrive_id: { get_input: libdrive_id }
 
  outputs:
    ip_address:
      value: { get_attribute: [ data_avenue, ip_address ]}
    port:
      value: { get_attribute: [ data_avenue, port ]}
  
  policies:
    - consumption:
        type: tosca.policies.Scaling.Performance.Consumption
        targets: [ data_avenue ]
        properties: 
          priority: 100
          trigger_1_ID: estimate_completion_time
          trigger_1_Namespace: prometheus
          max_cpu_consumption: { get_input: max_cpu_consumption }
          scale_up_max_time: { get_input: scale_up_max_time }
          min_cpu_consumption: { get_input: min_cpu_consumption }
          scale_down_max_time: { get_input: scale_down_max_time }