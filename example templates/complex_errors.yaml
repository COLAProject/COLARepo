tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/master/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  inputs:
    stress_img:
      type: string
      description: Docker image for stress
      default: lorel/docker-stress-ng
    mount_point:
      type: string
      description: Mount point for attached volume
      default: /tmp
    exposed_ports:
      type: list
      description: Ports to expose
      default: ["6379:6379"]

  node_templates:
    jobber:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
         entrypoint: sh -c "while true; do stress-ng --cpu 0 --cpu-method pi -l 10 -t 30 && (echo done >> /tmp/runs); done"
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Kube
           file: { get_input: stress_img }
           repository: docker_hub
       requirements:
        - volume:
            node: busydata
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                loc8tion: /tmp
        - host:
            node: worker_node
            relationship: tosca.relationships.HostedOn

    stress:
       type: tosca.nodes.MiCADO.Container.Application.Docker
       properties:
         entrypoint: sh -c "stress-ng --cpu 0 --cpu-method pi -l 75"
         deploy:
           resources:
             reservations:
               cpus: '1.0'
       artifacts:
         image:
           type: tosca.artifacts.Deployment.Image.Container.Docker
           file: lorel/docker-stress-ng
           repository: private_repo

    db:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        ports: { get_input: exposed_ports }
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: redis
          repository: docker_hub

    updater:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        command: sh -c "while true; do echo set runs $$(wc -l /tmp/runs | cut -d' ' -f1) | nc db 6379; sleep 30; done"
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: busybox
          repository: docker_hub
      requirements:
       - service:
          node: db
          relationship:
           type: tosca.relationships.MiCADO.ConnectsTo
           properties:
             network: stressnet
       - volume:
           node: busydata
           relationship:
             type: tosca.relationships.AttachesTo
             properties:
               location: { get_input: mount_point }
       - host:
           node: worker_node
           relationship: tosca.SomeOtherOrchestrator.relationships.HostedOn

    stressynet:
      type: tosca.nodes.MiCADO.network.Network.Docker
      properties:
        driver: "overlay"

    busydata:
      type: tosca.nodes.MiCADO.Volume.Docker

    worker_node:
      type: tosca.nodes.MiCADO.Occopus.CloudSigma.Compute
      properties:
        cloud:
          interface_cloud: cloudsigma
          endpoint_cloud: https://zrh.cloudsigma.com/api/2.0
      capabilities:
        host:
          properties:
            num_cpus: 2000
            mem_size: 1073741824
            vnc_password: secret
            libdrive_id: 87ce928e-e0bc-4cab-9502-514e523783e3
            public_key_id: ADD_YOUR_ID_HERE
            firewall_policy: ADD_YOUR_ID_HERE

  outputs:
    ip_address:
      value: { get_attribute: [ db, ip_address ]}
    port:
      value: { get_attribute: [ db, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker_node ]
        properties:
          constants:
            NODE_TH_MAX: '60'
            NODE_TH_MIN: '20'
          alerts:
          - alert: node_overloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
            for: 1m
          - alert: node_underloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
            for: 1m
          min_instances: 1
          max_instances: 3
          scaling_rule: |
            if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
              if node_overloaded:
                m_node_count+=1
              if node_underloaded:
                m_node_count-=1
            else:
              print('Transient phase, skipping update of nodes...')
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ stress ]
        properties:
          constants:
            SERVICE_NAME: 'stressng'
            SERVICE_FULL_NAME: '{{stack}}_stressng'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '20'
          alerts:
          - alert: service_overloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
            for: 30s
          - alert: service_underloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
            for: 30s
          min_instances: 1
          max_instances: 3
          scaling_rule: |
            if len(m_nodes) == m_node_count:
              if service_overloaded and m_node_count > m_container_count:
                m_container_count+=1
              if service_underloaded:
                m_container_count-=1
            else:
              print('Transient phase, skipping update of containers...')
